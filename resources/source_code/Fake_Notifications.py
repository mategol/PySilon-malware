import shlex
import os
from windows_toasts import Toast, ToastDisplayImage, WindowsToaster



def send_custom_notification(parameters):
    toaster = WindowsToaster(parameters["appname"])
    new_toast = Toast()
    new_toast.text_fields = [parameters["title"], parameters["text"]]

    image_path = parameters["image"]
    if image_path and os.path.exists(image_path):
        new_toast.AddImage(ToastDisplayImage.fromPath(image_path))
    
    default_link = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    link = parameters.get("link", default_link)

    new_toast.launch_action = link 

    if "duration" in parameters:
        new_toast.duration = parameters["duration"]

    if "sound" in parameters:
        new_toast.audio = parameters["sound"]

    try:
        toaster.show_toast(new_toast)
        return True
    except Exception as e:
        print(f"Failed to send notification. Error: {str(e)}")
        return False

def default_customs():
    return {
        "title": "Virus behaviour detected",
        "appname": "Windows Security",
        "text": "Click here to view actions",
        "image": "C:\\Windows\\System32\\WindowsSecurityIcon.png",
        "link": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    }

def syntaxhelp():
    syntax_embed = discord.Embed(
        title="Syntax Guide",
        description="To send a custom notification, use the following syntax:",
        color=discord.Color.blue()
        )
    syntax_embed.add_field(name="`.notification Parameter1=""... Parameter2=""...`", value="Parameters: title, text, image, link, duration (optional), sound (optional)")
    syntax_embed.add_field(name="Examples:", value="`.notification title='Virus behaviour detected' text='Click here to view actions' image='C:\\Windows\\System32\\WindowsSecurityIcon.png' link='https://www.youtube.com/watch?v=dQw4w9WgXcQ'`")
    syntax_embed.add_field(name="Templates:", value="1. `.notification windows_security`\n2. `.notification steam`\n3. `.notification epic`")
    return syntax_embed

def handle_parameters(kwargs):
    custom_parameters = {key: value for key, value in kwargs.items()}

    parameters = {}
    parameters.update(custom_parameters)

    if "Hero" in kwargs:
        parameters["image"] = kwargs["Hero"]

    defaults = default_customs()
    for key, value in defaults.items():
        if key not in parameters:
            parameters[key] = value

    return parameters

@client.event
async def on_ready():
    print('We have logged in as {0.user}'.format(client))

@client.command(name='notification')
async def handle_notification(ctx, *, args=""):
    await ctx.message.delete()
    args_list = shlex.split(args)
    print("Args list:", args_list)

    if not args_list:
        syntax_embed = syntaxhelp()
        await ctx.send(embed=syntax_embed)
        return


    template_name = args_list[0].lower()

    if template_name in ['windows_security', 'steam', 'epic']:
        if template_name == 'windows_security':
            parameters = default_customs()
        elif template_name == 'steam':
            parameters = {
                "title": "100% Free day",
                "appname": "Steam",
                "text": "All games on Steam are 100% free today",
                "image": "steam.png",
                "link": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            }
        elif template_name == 'epic':
            parameters = {
                "title": "100% Free day",
                "appname": "Epicgames",
                "text": "All games on Epic Games are 100% free today",
                "image": "epic.png",
                "link": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            }
        
        if send_custom_notification(parameters):
            await ctx.send(f"{parameters['appname']} notification sent successfully!")
        else:
            await ctx.send(f"Failed to send {parameters['appname']} notification.")
    else:
        kwargs = {}
        for arg in args_list:
            if "=" in arg:
                key, value = arg.split("=", maxsplit=1)
                print("Key:", key, "Value:", value) 
                value = value.strip('"')
                kwargs[key.strip()] = value

            if not kwargs:
                syntax_embed = syntaxhelp()
                await ctx.send(embed=syntax_embed)
                return


        parameters = handle_parameters(kwargs)

        if "link" in kwargs:
            link = kwargs["link"]
            if not link.startswith("http://") and not link.startswith("https://"):
                link = "https://" + link
            parameters["link"] = link

        if send_custom_notification(parameters):
            await ctx.send("Notification sent successfully!")
        else:
            await ctx.send("Failed to send notification.")

